import stresstesting
import os
import re
from mantid.simpleapi import *
from mantid.geometry import *

'''Check that the space groups generated by Mantid are correct.'''
class SpaceGroupFactoryTest(stresstesting.MantidStressTest):
  def runTest(self):
    self.spaceGroupData = self.loadReferenceData()

    availableSpaceGroups = SpaceGroupFactoryImpl.Instance().allSubscribedSpaceGroupSymbols()

    for symbol in availableSpaceGroups:
      self.checkSpaceGroup(symbol)

  def checkSpaceGroup(self, symbol):
    group = SpaceGroupFactoryImpl.Instance().createSpaceGroup(symbol)

    groupOperations = set(group.getSymmetryOperationStrings())
    referenceOperations = self.spaceGroupData[group.number()]

    differenceOne = groupOperations - referenceOperations
    differenceTwo = referenceOperations - groupOperations

    self.assertTrue(len(differenceOne) == 0)
    self.assertTrue(len(differenceTwo) == 0)
    self.assertTrue(groupOperations == referenceOperations)

  def loadReferenceData(self):
    # Reference data.
    # Dictionary has a string set for each space group number.
    tripletMatcher = re.compile("(\s{0,1}-?(x|y|z)((\+|\-)\d\/\d)?(,|$)){3}")
    separatorMatcher = re.compile("(\d+)")

    fileName = os.path.join(os.path.dirname(__file__), 'ReferenceResults','SpaceGroupSymmetryOperations.txt')

    print fileName

    fileHandle = open(fileName, 'r')
    spaceGroups = {}
    currentGroup = 0
    for currentLine in fileHandle:
      matchedSeparator = separatorMatcher.match(currentLine)

      if matchedSeparator is not None:
        currentGroup = int(matchedSeparator.group(1))
        spaceGroups[currentGroup] = set()
      else:
        triplet = tripletMatcher.match(currentLine)

        if triplet is not None:
          spaceGroups[currentGroup].add(currentLine.strip().replace(" ", ""))

    return spaceGroups

